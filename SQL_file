first lets create class section and users
section 
CREATE TABLE section (
    section_id INT AUTO_INCREMENT PRIMARY KEY,
    section_name VARCHAR(50) NOT NULL
);

class
CREATE TABLE class (
    class_id INT AUTO_INCREMENT PRIMARY KEY,
    class_name VARCHAR(100) NOT NULL
);

classTeacher
CREATE TABLE classteacher (
    teacher_id INT AUTO_INCREMENT PRIMARY KEY,
    teacher_name VARCHAR(100) NOT NULL,
    teacher_phone VARCHAR(15) NOT NULL,
    class_id INT NOT NULL,
    section_id INT NOT NULL,
    FOREIGN KEY (class_id) REFERENCES class(class_id) ON DELETE CASCADE,
    FOREIGN KEY (section_id) REFERENCES section(section_id) ON DELETE CASCADE
);

admin
CREATE TABLE admin (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    role VARCHAR(50) NOT NULL,
    password VARCHAR(255) NOT NULL,
    phone VARCHAR(15) NOT NULL,
    image VARCHAR(255), -- Field for storing image path or URL
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

Student TABLE
CREATE TABLE student (
    student_id INT AUTO_INCREMENT PRIMARY KEY,
    full_name VARCHAR(255) NOT NULL,
    class_id INT NOT NULL,
    section_id INT NOT NULL,
    profile_image VARCHAR(255),
    address VARCHAR(255),
    street VARCHAR(255),
    phone_number VARCHAR(15),
    words_from_class_teacher TEXT,
    words_from_principal TEXT,
    education_status VARCHAR(50),
    remarks TEXT,
    admin_id INT,  -- Add the admin_id column to establish the relationship
    FOREIGN KEY (class_id) REFERENCES class(class_id) ON DELETE CASCADE,
    FOREIGN KEY (section_id) REFERENCES section(section_id) ON DELETE CASCADE,
    FOREIGN KEY (admin_id) REFERENCES admin(id) ON DELETE SET NULL -- Correct reference to admin table's 'id' column
);

Achivement TABLE
CREATE TABLE achievement (
    id INT AUTO_INCREMENT PRIMARY KEY,         -- Unique ID for each achievement
    title VARCHAR(255) NOT NULL,               -- Title of the achievement
    date_of_achievement DATE NOT NULL,         -- Date of the achievement
    awarded_by VARCHAR(255),                   -- Awarding entity/individual
    photo BLOB,                                -- Photo related to the achievement
    student_id INT,                            -- Foreign key referencing student_id
    admin_id INT,                              -- Foreign key referencing admin_id
    FOREIGN KEY (student_id) REFERENCES student(student_id) ON DELETE CASCADE, -- Reference to student table
    FOREIGN KEY (admin_id) REFERENCES admin(id) ON DELETE SET NULL             -- Reference to admin table
);


CREATE TABLE exams (
    id INT AUTO_INCREMENT PRIMARY KEY,         -- Unique ID for each exam record
    student_id INT NOT NULL,                   -- Foreign key referencing student_id
    admin_id INT,                              -- Foreign key referencing admin_id (must allow NULL)
    exam_date DATE NOT NULL,                   -- Date of the exam
    GPA DECIMAL(3, 2),                         -- Grade Point Average (GPA) for the exam
    failed_subjects TEXT,                      -- List of failed subjects
    passed_subjects TEXT,                      -- List of passed subjects
    remarks TEXT,                              -- General remarks about the student's performance
    parents_view TEXT,                         -- Feedback or comments from parents
    FOREIGN KEY (student_id) REFERENCES student(student_id) ON DELETE CASCADE, -- Reference to student table
    FOREIGN KEY (admin_id) REFERENCES admin(id) ON DELETE SET NULL             -- Reference to admin table
);

CREATE TABLE student_reports (
    report_id INT AUTO_INCREMENT PRIMARY KEY,  -- Unique ID for each report entry
    student_id INT NOT NULL,                   -- Foreign key referencing student_id
    admin_id INT,                              -- Foreign key referencing admin_id (must allow NULL)
    report_date DATE NOT NULL,                 -- The specific date the report is created
    admin_notes TEXT,                          -- Notes from admin about the student
    picture BLOB,                              -- Image (can store image as BLOB or you can use VARCHAR for a URL path)
    visit_report TEXT,                         -- Report from parents or visit feedback
    FOREIGN KEY (student_id) REFERENCES student(student_id) ON DELETE CASCADE, -- Reference to student table
    FOREIGN KEY (admin_id) REFERENCES admin(id) ON DELETE SET NULL             -- Reference to admin table
);
